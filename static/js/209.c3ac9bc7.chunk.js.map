{"version":3,"file":"static/js/209.c3ac9bc7.chunk.js","mappings":"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","sources":["mocks/handlers.js","mocks/browser.js"],"sourcesContent":["import { rest } from 'msw';\r\nimport { v4 as uuidv4 } from 'uuid'; // For generating tool_ids if needed\r\n\r\nconst mockUser = {\r\n  id: 1,\r\n  username: 'testuser',\r\n  email: 'test@example.com',\r\n  role: 'user',\r\n};\r\n\r\nconst mockSystemTools = [\r\n  {\r\n    tool_id: 'mcp_system_transfer',\r\n    name: 'System MCP Token Transfer',\r\n    description: 'System default token transfer using MCP.',\r\n    type: 'mcp',\r\n    provider: 'System',\r\n    server_name: 'mcp_server_1',\r\n    endpoint: { /* MCP specific endpoint config */ },\r\n    request_schema: { /* schema */ },\r\n    response_schema: { /* schema */ },\r\n    tags: ['system', 'mcp', 'finance'],\r\n    created_at: '2024-01-15T10:00:00Z',\r\n    rating: 4.5,\r\n  },\r\n  {\r\n    tool_id: 'http_system_weather',\r\n    name: 'System HTTP Weather API',\r\n    description: 'System default weather service.',\r\n    type: 'http',\r\n    provider: 'System',\r\n    endpoint: {\r\n      url: 'https://api.weather.example.com/system',\r\n      method: 'GET',\r\n      platform_type: 'generic_http',\r\n    },\r\n    request_schema: { type: 'object', properties: { city: { type: 'string' } }, required: ['city'] },\r\n    response_schema: { /* schema */ },\r\n    tags: ['system', 'http', 'weather'],\r\n    created_at: '2024-02-20T11:00:00Z',\r\n    rating: 4.2,\r\n  },\r\n  {\r\n    tool_id: 'dev_tool_translator',\r\n    name: 'Advanced Translator (Dev)',\r\n    description: 'Community-provided translation service with more languages.',\r\n    type: 'http',\r\n    provider: 'DeveloperCommunity',\r\n    isDeveloperTool: true,\r\n    endpoint: {\r\n      url: 'https://api.devtranslate.example.com/translate',\r\n      method: 'POST',\r\n      platform_type: 'generic_http',\r\n    },\r\n    request_schema: { type: 'object', properties: { text: { type: 'string' }, target_lang: { type: 'string' } }, required: ['text', 'target_lang'] },\r\n    response_schema: { /* schema */ },\r\n    tags: ['developer', 'http', 'translation', 'ai'],\r\n    created_at: '2024-05-01T15:30:00Z',\r\n    rating: 4.8,\r\n  },\r\n  {\r\n    tool_id: 'dev_tool_imagegen',\r\n    name: 'AI Image Generator (Dev)',\r\n    description: 'Generate images from text prompts, by a third-party dev.',\r\n    type: 'http',\r\n    provider: 'ArtAIProvider',\r\n    isDeveloperTool: true,\r\n    endpoint: {\r\n      url: 'https://api.ai-image.example.com/generate',\r\n      method: 'POST',\r\n      platform_type: 'generic_http',\r\n    },\r\n    request_schema: { type: 'object', properties: { prompt: { type: 'string' } }, required: ['prompt'] },\r\n    response_schema: { /* schema */ },\r\n    tags: ['developer', 'http', 'image', 'generation', 'creative'],\r\n    created_at: '2024-04-10T09:00:00Z',\r\n    rating: 4.9,\r\n  },\r\n  {\r\n    tool_id: 'system_music_player',\r\n    name: 'Smart Music Player',\r\n    description: 'Intelligent music streaming service with voice control and personalized recommendations.',\r\n    type: 'http',\r\n    provider: 'System',\r\n    endpoint: {\r\n      url: 'https://api.music.example.com/player',\r\n      method: 'POST',\r\n      platform_type: 'generic_http',\r\n    },\r\n    request_schema: { type: 'object', properties: { action: { type: 'string' }, song: { type: 'string' }, artist: { type: 'string' } }, required: ['action'] },\r\n    response_schema: { /* schema */ },\r\n    tags: ['system', 'http', 'music', 'entertainment', 'voice-control'],\r\n    created_at: '2024-03-25T14:20:00Z',\r\n    rating: 4.6,\r\n  }\r\n];\r\n\r\n// Database for developer-specific tools\r\nlet developerToolsDb = [\r\n  {\r\n    tool_id: 'dev_owned_dify_app_123',\r\n    name: 'My Custom Dify App (Dev)',\r\n    description: 'A Dify application integrated by the developer.',\r\n    type: 'http',\r\n    provider: 'devuser',\r\n    isDeveloperTool: true,\r\n    status: 'enabled',\r\n    endpoint: {\r\n      url: 'https://dify.example.com/api/dev-app-1/completion-messages',\r\n      method: 'POST',\r\n      platform_type: 'dify',\r\n      authentication: { type: 'bearer', token: 'dify-secret-token-dev1' },\r\n      dify_config: {\r\n        app_id: 'dify-app-id-123', // Example app_id\r\n        user_query_variable: 'query',\r\n        fixed_inputs: { \"scene_mode\": \"chat\" }\r\n      }\r\n    },\r\n    documentation: 'This is a Dify app for testing. Input: query (string). Output: text response.',\r\n    request_schema: {},\r\n    response_schema: {},\r\n    tags: ['developer', 'http', 'dify', 'custom'],\r\n    created_at: '2024-05-15T10:00:00Z',\r\n    rating: 0,\r\n  },\r\n  {\r\n    tool_id: 'dev_owned_coze_bot_456',\r\n    name: 'Personal Coze Bot (Dev)',\r\n    description: 'A Coze bot for personal assistance, by the developer.',\r\n    type: 'http',\r\n    provider: 'devuser',\r\n    isDeveloperTool: true,\r\n    status: 'disabled',\r\n    endpoint: {\r\n      url: 'https://coze.example.com/api/v2/chat',\r\n      method: 'POST',\r\n      platform_type: 'coze',\r\n      authentication: { type: 'api_key', key_name: 'Authorization', api_key: 'Bearer coze-secret-key-dev1' },\r\n      coze_config: {\r\n        bot_id: 'coze-bot-xyz789',\r\n        user_query_variable: 'query'\r\n      }\r\n    },\r\n    documentation: 'This is a Coze bot. Input: query (string). Output: chat message.',\r\n    request_schema: {},\r\n    response_schema: {},\r\n    tags: ['developer', 'http', 'coze', 'chatbot'],\r\n    created_at: '2024-05-16T11:30:00Z',\r\n    rating: 0,\r\n  }\r\n];\r\n\r\nexport const handlers = [\r\n  // Authentication\r\n  rest.post('/auth/register', async (req, res, ctx) => {\r\n    const { username, email, password } = await req.json();\r\n    if (!username || !email || !password) {\r\n      return res(ctx.status(400), ctx.json({ error: { code: 'INVALID_PARAM', msg: 'Missing fields' } }));\r\n    }\r\n    // Check for existing user (for testing error cases)\r\n    if (email === 'existing@example.com') {\r\n      return res(ctx.status(400), ctx.json({ error: { code: 'VALIDATION_ERROR', msg: 'Email already exists' } }));\r\n    }\r\n    // Simulate successful registration with token\r\n    return res(\r\n      ctx.status(201),\r\n      ctx.json({\r\n        token: 'fake-jwt-register-token-string',\r\n        user: {\r\n          id: Math.floor(Math.random() * 1000),\r\n          username,\r\n          email,\r\n          role: 'user'\r\n        }\r\n      })\r\n    );\r\n  }),\r\n\r\n  // 修复登录接口路径和格式匹配问题\r\n  rest.post('/api/v1/auth/token', async (req, res, ctx) => {\r\n    // 处理 application/x-www-form-urlencoded 格式的请求体\r\n    const body = await req.text();\r\n    const params = new URLSearchParams(body);\r\n    const username = params.get('username');\r\n    const password = params.get('password');\r\n    \r\n    console.log('MSW intercepted login request:', { username, password });\r\n    \r\n    if (username === 'testuser' && password === 'password') {\r\n      return res(\r\n        ctx.status(200),\r\n        ctx.json({\r\n          access_token: 'abc',  // 注意：返回的是access_token，不是token\r\n          user_id: 1,\r\n          role: 'user'\r\n        })\r\n      );\r\n    } else if (username === 'devuser' && password === 'password') {\r\n      return res(\r\n        ctx.status(200),\r\n        ctx.json({\r\n          access_token: 'abc-dev',\r\n          user_id: 2,\r\n          role: 'developer'\r\n        })\r\n      );\r\n    } else {\r\n      return res(\r\n        ctx.status(401),\r\n        ctx.json({ detail: 'Invalid credentials' })\r\n      );\r\n    }\r\n  }),\r\n\r\n  // 兼容旧的登录接口（备用）\r\n  rest.post('/auth/login', async (req, res, ctx) => {\r\n    const { username, password } = await req.json();\r\n    if (username === 'testuser' && password === 'password') {\r\n      return res(\r\n        ctx.status(200),\r\n        ctx.json({\r\n          token: 'abc',  // 符合文档要求的token值\r\n          user: mockUser,\r\n        })\r\n      );\r\n    } else if (username === 'devuser' && password === 'password') {\r\n      return res(\r\n        ctx.status(200),\r\n        ctx.json({\r\n          token: 'abc-dev',  // 开发者token保持区别但简化\r\n          user: { ...mockUser, id: 2, username: 'devuser', role: 'developer' }\r\n        })\r\n      );\r\n    } else {\r\n      return res(\r\n        ctx.status(401),\r\n        ctx.json({ error: { code: 'AUTH_FAILED', msg: 'Invalid credentials' } })\r\n      );\r\n    }\r\n  }),\r\n\r\n  // Mock getUserInfo API - 修复路径匹配问题\r\n  rest.get('/api/v1/auth/me', (req, res, ctx) => {\r\n    const authToken = req.headers.get('Authorization');\r\n\r\n    if (!authToken || !authToken.startsWith('Bearer ')) {\r\n      return res(ctx.status(401), ctx.json({ error: { code: 'UNAUTHORIZED', msg: 'No token provided' } }));\r\n    }\r\n\r\n    const token = authToken.replace('Bearer ', '');\r\n\r\n    // Mock user based on token\r\n    if (token === 'abc-dev') {  // 更新为新的开发者token\r\n      return res(\r\n        ctx.status(200),\r\n        ctx.json({\r\n          success: true,\r\n          user: {\r\n            id: 2,\r\n            username: 'devuser',\r\n            email: 'dev@example.com',\r\n            role: 'developer'\r\n          }\r\n        })\r\n      );\r\n    } else if (token === 'abc') {  // 更新为新的用户token\r\n      return res(\r\n        ctx.status(200),\r\n        ctx.json({\r\n          success: true,\r\n          user: {\r\n            id: 1,\r\n            username: 'testuser',\r\n            email: 'test@example.com',\r\n            role: 'user'\r\n          }\r\n        })\r\n      );\r\n    }\r\n\r\n    return res(ctx.status(401), ctx.json({ error: { code: 'INVALID_TOKEN', msg: 'Invalid token' } }));\r\n  }),\r\n\r\n  // Refresh token API已移除（后端没有此API）\r\n\r\n  // MOCK GET ALL SERVICES (服务列表) - 支持分页\r\n  rest.get('/api/v1/services', (req, res, ctx) => {\r\n    const page = parseInt(req.url.searchParams.get('page')) || 1;\r\n    const pageSize = parseInt(req.url.searchParams.get('page_size')) || 10;\r\n\r\n    console.log(`MSW intercepted GET /api/services - 页码: ${page}, 每页数量: ${pageSize}`);\r\n\r\n    // 计算分页\r\n    const totalItems = mockSystemTools.length;\r\n    const totalPages = Math.ceil(totalItems / pageSize);\r\n    const startIndex = (page - 1) * pageSize;\r\n    const endIndex = startIndex + pageSize;\r\n    const itemsForPage = mockSystemTools.slice(startIndex, endIndex);\r\n\r\n    return res(\r\n      ctx.status(200),\r\n      ctx.json({\r\n        items: itemsForPage,\r\n        current_page: page,\r\n        total_pages: totalPages,\r\n        total_items: totalItems,\r\n        page_size: pageSize,\r\n        has_next: page < totalPages,\r\n        has_prev: page > 1\r\n      })\r\n    );\r\n  }),\r\n\r\n  // Core API\r\n  rest.post('/api/v1/interpret', async (req, res, ctx) => {\r\n    const { sessionId, userId, query } = await req.json(); // Changed text to query\r\n    if (!sessionId || userId === undefined || !query) {\r\n      return res(ctx.status(400), ctx.json({ error: { code: 'INVALID_PARAM', msg: 'Missing fields for interpret' } }));\r\n    }\r\n\r\n    // 简单的STT识别结果处理 - 直接返回\"你好\"作为响应\r\n    console.log(`MSW intercepted interpret request with query: \"${query}\"`);\r\n\r\n    // 检查是否是简单的问候语或测试语音输入\r\n    const lowerText = query.toLowerCase();\r\n    if (lowerText.includes('你好') || lowerText.includes('hello') || lowerText.includes('hi') || query.trim().length < 10) {\r\n      // 对于简单问候语，直接返回友好回应，不需要工具调用\r\n      return res(\r\n        ctx.status(200),\r\n        ctx.json({\r\n          sessionId,\r\n          action: 'respond',\r\n          content: '你好！我是你的语音助手，很高兴为你服务。你可以问我任何问题或请求帮助。',\r\n          type: 'direct_response'\r\n        })\r\n      );\r\n    }\r\n\r\n    let action = 'unknown_tool';\r\n    let params = {};\r\n    let confirmText = `我理解了：\"${query}\"。这样对吗？`;\r\n\r\n    if (lowerText.includes('transfer') || lowerText.includes('转账') || lowerText.includes('mcp')) {\r\n      action = mockSystemTools.find(t => t.tool_id === 'mcp_system_transfer').tool_id;\r\n      params = { amount: 100, currency: 'ETH', recipient: '0x123...' };\r\n      confirmText = `你想要使用MCP转账100 ETH到0x123...吗？`;\r\n    } else if (lowerText.includes('weather') || lowerText.includes('天气')) {\r\n      action = mockSystemTools.find(t => t.tool_id === 'http_system_weather').tool_id;\r\n      params = { city: 'Beijing' };\r\n      confirmText = `要查询北京的天气吗？`;\r\n    } else if (lowerText.includes('translate') || lowerText.includes('翻译') || lowerText.includes('translator')) {\r\n      action = mockSystemTools.find(t => t.tool_id === 'dev_tool_translator').tool_id;\r\n      params = { text: '你好世界', target_lang: 'en' };\r\n      confirmText = `要将\"你好世界\"翻译成英文吗？`;\r\n    } else if (lowerText.includes('image') || lowerText.includes('图片') || lowerText.includes('generate picture') || lowerText.includes('生成图片')) {\r\n      action = mockSystemTools.find(t => t.tool_id === 'dev_tool_imagegen').tool_id;\r\n      params = { prompt: '一只戴帽子的猫' };\r\n      confirmText = `要生成一张戴帽子的猫的图片吗？`;\r\n    } else if (lowerText.includes('music') || lowerText.includes('音乐') || lowerText.includes('play') || lowerText.includes('播放') || lowerText.includes('song') || lowerText.includes('歌曲')) {\r\n      action = mockSystemTools.find(t => t.tool_id === 'system_music_player').tool_id;\r\n      params = { action: 'play', song: '流行歌曲', artist: '各种艺术家' };\r\n      confirmText = `要为你播放一些音乐吗？`;\r\n    } else {\r\n      // Try to match against developer tools if no system tool matches\r\n      const devToolMatch = developerToolsDb.find(tool => lowerText.includes(tool.name.toLowerCase().split(' ')[0]));\r\n      if (devToolMatch) {\r\n        action = devToolMatch.tool_id;\r\n        // For simplicity, let's assume all dev tools take a generic 'input' param for now\r\n        params = { input: query };\r\n        confirmText = `要使用'${devToolMatch.name}'服务处理你的查询：\"${query}\"吗？`;\r\n      }\r\n    }\r\n\r\n    return res(\r\n      ctx.status(200),\r\n      ctx.json({\r\n        sessionId,\r\n        tool_calls: [{\r\n          tool_id: action,\r\n          parameters: params\r\n        }],\r\n        confirm_text: confirmText,\r\n        type: 'tool_call_required'\r\n      })\r\n    );\r\n  }),\r\n\r\n  rest.post('/api/v1/execute', async (req, res, ctx) => {\r\n    const { sessionId, userId, tool_id, params } = await req.json();\r\n    if (!sessionId || !tool_id || !params) {\r\n      return res(ctx.status(400), ctx.json({ error: { code: 'INVALID_PARAM', msg: 'Missing fields for execute' } }));\r\n    }\r\n\r\n    const tool = [...mockSystemTools, ...developerToolsDb].find(t => t.tool_id === tool_id);\r\n    if (!tool) {\r\n      return res(ctx.status(404), ctx.json({ error: { code: 'TOOL_NOT_FOUND', msg: `Tool ${tool_id} not found` } }));\r\n    }\r\n\r\n    if (tool.isDeveloperTool && tool.status === 'disabled') {\r\n      return res(ctx.status(403), ctx.json({ error: { code: 'TOOL_DISABLED', msg: `Tool ${tool_id} is currently disabled by the developer.` } }));\r\n    }\r\n\r\n    let responseData = {};\r\n    // Simulate execution based on tool type or platform_type\r\n    if (tool.type === 'mcp') {\r\n      responseData = { success: true, data: { transactionHash: `0x_mcp_tx_${Date.now()}`, message: `MCP call to ${tool.name} successful.` } };\r\n    } else if (tool.type === 'http') {\r\n      if (tool.endpoint?.platform_type === 'dify') {\r\n        responseData = { success: true, data: { answer: `Dify app '${tool.name}' processed '${params[tool.endpoint.dify_config?.user_query_variable || 'query']}'. Mocked response.`, conversation_id: `dify_conv_${Date.now()}` } };\r\n      } else if (tool.endpoint?.platform_type === 'coze') {\r\n        responseData = { success: true, data: { answer: `Coze bot '${tool.name}' responded to '${params[tool.endpoint.coze_config?.user_query_variable || 'query']}'. This is a mock.`, conversation_id: `coze_conv_${Date.now()}` } };\r\n      } else if (tool.tool_id === 'system_music_player') {\r\n        // Special handling for music player\r\n        const action = params.action || 'play';\r\n        const song = params.song || 'Unknown Song';\r\n        const artist = params.artist || 'Unknown Artist';\r\n        responseData = {\r\n          success: true,\r\n          data: {\r\n            message: `🎵 Music Player: ${action === 'play' ? 'Now playing' : action} \"${song}\" by ${artist}`,\r\n            status: 'playing',\r\n            track: { title: song, artist: artist, duration: '3:42' },\r\n            volume: 75\r\n          }\r\n        };\r\n      } else { // Generic HTTP\r\n        responseData = { success: true, data: { message: `HTTP call to ${tool.name} successful. Input was: ${JSON.stringify(params)}` } };\r\n      }\r\n    } else {\r\n      responseData = { success: false, error: { code: 'UNKNOWN_TOOL_TYPE', msg: `Tool type ${tool.type} not supported for execution.` } };\r\n    }\r\n\r\n    return res(ctx.status(200), ctx.json({ sessionId, ...responseData }));\r\n  }),\r\n\r\n  // Developer API Endpoints\r\n  rest.get('/api/v1/dev/tools', (req, res, ctx) => {\r\n    // This should ideally be user-specific, but for mock, return all dev tools\r\n    return res(ctx.status(200), ctx.json({ tools: developerToolsDb }));\r\n  }),\r\n\r\n  rest.post('/api/v1/dev/tools', async (req, res, ctx) => {\r\n    const serviceData = await req.json();\r\n    const newTool = {\r\n      tool_id: `dev_tool_${uuidv4().slice(0, 8)}`,\r\n      provider: 'devuser', // Assuming current authenticated user is the provider\r\n      isDeveloperTool: true,\r\n      status: 'enabled', // Default to enabled\r\n      created_at: new Date().toISOString(),\r\n      rating: 0,\r\n      tags: serviceData.tags || ['custom', serviceData.platformType || 'http'],\r\n      // Carry over all relevant fields from serviceData\r\n      name: serviceData.serviceName,\r\n      description: serviceData.serviceDescription,\r\n      type: 'http', // All dev tools are HTTP for now in this mock\r\n      endpoint: {\r\n        url: serviceData.endpointUrl,\r\n        method: serviceData.method || 'POST', // Default to POST if not provided\r\n        platform_type: serviceData.platformType,\r\n        authentication: { type: 'bearer', token: serviceData.apiKey }, // Simplify auth for mock\r\n        // Add platform-specific configs if they exist\r\n        ...(serviceData.platformType === 'dify' && { dify_config: { app_id: serviceData.difyAppId, user_query_variable: serviceData.userInputVar } }),\r\n        ...(serviceData.platformType === 'coze' && { coze_config: { bot_id: serviceData.cozeBotId, user_query_variable: serviceData.userInputVar } }),\r\n      },\r\n      documentation: serviceData.documentation, // Save documentation\r\n      // request_schema and response_schema can be added later if needed for dev tools\r\n    };\r\n    developerToolsDb.push(newTool);\r\n    return res(ctx.status(201), ctx.json({\r\n      message: `服务 \"${serviceData.serviceName}\" 已成功创建！`,\r\n      tool: newTool\r\n    }));\r\n  }),\r\n\r\n  rest.put('/api/dev/tools/:toolId', async (req, res, ctx) => {\r\n    const { toolId } = req.params;\r\n    const updateData = await req.json();\r\n    const toolIndex = developerToolsDb.findIndex(t => t.tool_id === toolId);\r\n    if (toolIndex === -1) {\r\n      return res(ctx.status(404), ctx.json({ error: 'Tool not found' }));\r\n    }\r\n    // Only allow status updates for simplicity in mock\r\n    if (updateData.status) {\r\n      developerToolsDb[toolIndex].status = updateData.status;\r\n    }\r\n    // Could extend to update other fields if necessary\r\n    return res(ctx.status(200), ctx.json(developerToolsDb[toolIndex]));\r\n  }),\r\n\r\n  rest.delete('/api/dev/tools/:toolId', (req, res, ctx) => {\r\n    const { toolId } = req.params;\r\n    const initialLength = developerToolsDb.length;\r\n    developerToolsDb = developerToolsDb.filter(t => t.tool_id !== toolId);\r\n    if (developerToolsDb.length < initialLength) {\r\n      return res(ctx.status(200), ctx.json({ message: 'Tool deleted successfully' }));\r\n    }\r\n    return res(ctx.status(404), ctx.json({ error: 'Tool not found for deletion' }));\r\n  }),\r\n\r\n  // NEW: Mock for testing an unsaved developer tool configuration\r\n  rest.post('/api/v1/dev/tools/test', async (req, res, ctx) => {\r\n    const requestData = await req.json();\r\n    console.log('Testing tool config:', JSON.stringify(requestData, null, 2));\r\n\r\n    const { tool_config, test_input } = requestData;\r\n    const testInput = test_input;\r\n\r\n    if (!testInput || testInput.trim() === '') {\r\n      return res(ctx.status(400), ctx.json({ success: false, error: 'Test input is required.' }));\r\n    }\r\n\r\n    const { platform_type: platformType, authentication, dify_config, coze_config, endpoint_config } = tool_config || {};\r\n    const apiKey = authentication?.token;\r\n    const difyAppId = dify_config?.app_id;\r\n    const cozeBotId = coze_config?.bot_id;\r\n    const endpointUrl = endpoint_config?.url;\r\n\r\n    let responseData = { success: false, error: 'Unknown platform or configuration error.', raw_response: null };\r\n\r\n    if (platformType === 'dify') {\r\n      if (apiKey && difyAppId && endpointUrl) {\r\n        responseData = {\r\n          success: true,\r\n          message: 'Dify API test successful!',\r\n          raw_response: {\r\n            dify_answer: `Mock Dify response for '${testInput}' using app ${difyAppId}. This is a simulated test.`,\r\n            conversation_id: `test_dify_conv_${uuidv4()}`,\r\n          }\r\n        };\r\n      } else {\r\n        responseData.error = 'Dify configuration incomplete (API Key, App ID, or URL missing).';\r\n      }\r\n    } else if (platformType === 'coze') {\r\n      if (apiKey && cozeBotId && endpointUrl) {\r\n        responseData = {\r\n          success: true,\r\n          message: 'Coze API test successful!',\r\n          raw_response: {\r\n            coze_message: `Mock Coze bot ${cozeBotId} response for '${testInput}'. Simulation successful.`,\r\n            messages: [{ type: 'answer', content: `Mocked Coze: ${testInput}` }],\r\n            conversation_id: `test_coze_conv_${uuidv4()}`,\r\n          }\r\n        };\r\n      } else {\r\n        responseData.error = 'Coze configuration incomplete (API Key, Bot ID, or URL missing).';\r\n      }\r\n    } else if (platformType === 'http') {\r\n      if (apiKey && endpointUrl) {\r\n        responseData = {\r\n          success: true,\r\n          message: 'Generic HTTP API test successful!',\r\n          raw_response: {\r\n            generic_http_data: `Mock generic HTTP response for input '${testInput}' to URL ${endpointUrl}. Test OK.`,\r\n            status_code: 200\r\n          }\r\n        };\r\n      } else {\r\n        responseData.error = 'Generic HTTP configuration incomplete (API Key or URL missing).';\r\n      }\r\n    } else {\r\n      responseData.error = `Platform type '${platformType}' not supported for testing in mock.`;\r\n    }\r\n    await new Promise(resolve => setTimeout(resolve, 750)); // Simulate network delay\r\n    return res(ctx.status(200), ctx.json(responseData));\r\n  }),\r\n\r\n  // Example for /api/dev/upload (placeholder)\r\n  rest.post('/api/v1/dev/upload', (req, res, ctx) => {\r\n    // This would normally handle file uploads. For mock, just acknowledge.\r\n    return res(ctx.status(200), ctx.json({ message: 'File upload acknowledged (mock)' }));\r\n  }),\r\n];\r\n\r\n// Helper to simulate getting the authenticated user's ID or context if needed later\r\n// function getAuthenticatedDeveloperId(req) {\r\n//   // In a real scenario, you'd inspect the Authorization header or session\r\n//   // For now, we can assume a fixed developer ID or a mock mechanism\r\n//   const authToken = req.headers.get('Authorization');\r\n//   if (authToken === 'Bearer fake-jwt-developer-token-string') {\r\n//       return 2; // Matches devuser in login mock\r\n//   }\r\n//   return null; \r\n// } ","import { setupWorker } from 'msw';\r\nimport { handlers } from './handlers';\r\n \r\n// This configures a Service Worker with the given request handlers.\r\nexport const worker = setupWorker(...handlers); "],"names":["mockUser","id","username","email","role","mockSystemTools","tool_id","name","description","type","provider","server_name","endpoint","request_schema","response_schema","tags","created_at","rating","url","method","platform_type","properties","city","required","isDeveloperTool","text","target_lang","prompt","action","song","artist","developerToolsDb","status","authentication","token","dify_config","app_id","user_query_variable","fixed_inputs","documentation","key_name","api_key","coze_config","bot_id","handlers","rest","post","async","req","res","ctx","password","json","error","code","msg","user","Math","floor","random","body","params","URLSearchParams","get","console","log","access_token","user_id","detail","authToken","headers","startsWith","replace","success","page","parseInt","searchParams","pageSize","totalItems","length","totalPages","ceil","startIndex","endIndex","itemsForPage","slice","items","current_page","total_pages","total_items","page_size","has_next","has_prev","sessionId","userId","query","undefined","lowerText","toLowerCase","includes","trim","content","confirmText","find","t","amount","currency","recipient","devToolMatch","tool","split","input","tool_calls","parameters","confirm_text","responseData","data","transactionHash","Date","now","message","_tool$endpoint","_tool$endpoint2","_tool$endpoint$dify_c","answer","conversation_id","_tool$endpoint$coze_c","track","title","duration","volume","JSON","stringify","tools","serviceData","newTool","uuidv4","toISOString","platformType","serviceName","serviceDescription","endpointUrl","apiKey","difyAppId","userInputVar","cozeBotId","push","put","toolId","updateData","toolIndex","findIndex","delete","initialLength","filter","requestData","tool_config","test_input","testInput","endpoint_config","raw_response","dify_answer","coze_message","messages","generic_http_data","status_code","Promise","resolve","setTimeout","worker","setupWorker"],"sourceRoot":""}